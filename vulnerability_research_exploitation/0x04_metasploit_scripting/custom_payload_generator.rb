require 'base64'
require 'optparse'
require 'json'

options = {
  out: 'payload.b64',
  description: 'Demo benign payload: prints HELLO (not executed as code here)',
  pretty: false
}

OptionParser.new do |opts|
  opts.banner = "Usage: ruby custom_payload_generator.rb [options]"

  opts.on('-o', '--out FILE', 'Output filename for encoded payload (default: payload.b64)') do |v|
    options[:out] = v
  end

  opts.on('-d', '--description TEXT', 'Payload description (metadata)') do |v|
    options[:description] = v
  end

  opts.on('-p', '--pretty', 'Write JSON metadata with pretty formatting') do
    options[:pretty] = true
  end

  opts.on('-h', '--help', 'Show help') do
    puts opts
    exit
  end
end.parse!

# === Benign "payload" bytes ===
# For safety, this "payload" is just data that could represent anything.
# Here we use a short byte sequence that is non-executable and purely illustrative.
# DO NOT replace with actual shellcode or any malicious bytes.
payload_bytes = [
  0x48, 0x45, 0x4C, 0x4C, 0x4F, # ASCII "HELLO"
  0x0A                          # newline
].pack('C*') # binary string

# Metadata you might want to store alongside the payload
metadata = {
  description: options[:description],
  created_at: Time.now.utc.iso8601,
  length_bytes: payload_bytes.bytesize,
  platform: 'demo/none',
  notes: 'This is a harmless demo payload. Not executable shellcode.'
}

# Encode payload using Base64 (safe transport encoding)
encoded = Base64.strict_encode64(payload_bytes)

# Package together as JSON: { metadata: {...}, payload_b64: "..." }
out_obj = {
  metadata: metadata,
  payload_b64: encoded
}

json_flags = options[:pretty] ? JSON.pretty_generate(out_obj) : out_obj.to_json

File.write(options[:out], json_flags)
puts "[+] Wrote encoded payload (JSON) to #{options[:out]}"
puts "[*] Metadata: #{metadata.inspect}"
puts "[*] Encoded payload length: #{encoded.length} characters"

# Demonstrate decoding (in-memory)
decoded = Base64.strict_decode64(encoded)
if decoded == payload_bytes
  puts "[+] Decode test passed (decoded bytes match original demo payload)."
else
  puts "[-] Decode test failed."
end
